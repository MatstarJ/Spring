<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean id="customAccessDenied" class="com.matstar.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="com.matstar.security.CustomLoginSuccessHandler"></bean>	
	<!-- <bean id="customPasswordEncoder" class="com.matstar.security.CustomNoOpPasswordEncoder"></bean> -->
	<bean id ="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<bean id="customUserDetailsService" class="com.matstar.security.CustomUserDetailsService"></bean>
	
	<!-- HikariCP configuration -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"></property>
		<property name="username" value="COCODAN"></property>
		<property name="password" value="1234"></property>
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" /> 
	</bean>
	
	
	
	
	
	
		<!-- 접근 제한 설정 -->
	<security:http>
		
		<security:intercept-url pattern="/securitySample/all" access="permitAll" />
		
		<security:intercept-url pattern="/securitySample/member" access="hasRole('ROLE_MEMBER')"/>
		
		<security:intercept-url pattern="/securitySample/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- <security:access-denied-handler error-page="securitySample/accessError"/> -->
		
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!--커스텀 로그인 페이지 설정,  login-page 속성은 반드시 GET 방식으로 접근하는 URI를 지정한다. -->
		<!-- authentication-success-handler 속성 : 로그인 성공 후의 처리를 담당 -->
		<security:form-login login-page="/securitySample/customLogin" authentication-success-handler-ref="customLoginSuccess" />
		
		
		<!--  기본 로그인 페이지 -->
		<!-- <security:form-login/> -->
		
	
		<security:logout logout-url="/securitySample/customLogout" invalidate-session="true"/>
	
	
		<!-- <security:csrf disabled="true"/> -->
	
	</security:http>



	
	
	<security:authentication-manager>
		<security:authentication-provider
		user-service-ref ="customUserDetailsService">
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource"/> -->
			
			<!-- <security:password-encoder ref="customPasswordEncoder"/> -->
			
<!-- 			<security:jdbc-user-service data-source-ref="dataSource" 
			users-by-username-query="select userid, userpw, enabled from tbl_member where userid = ? " 
			authorities-by-username-query="select userid, auth from tbl_member_auth where userid = ? "/>  -->
			
			
			
			<security:password-encoder ref="bcryptPasswordEncoder" />
			
		</security:authentication-provider>
	</security:authentication-manager>
	
	
<!-- 	<security:authentication-manager>
	
		<security:authentication-provider>
			<security:user-service>
			
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
			
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN" />
				
			</security:user-service>
		</security:authentication-provider>
	
	</security:authentication-manager> -->
</beans>
